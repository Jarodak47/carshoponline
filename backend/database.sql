-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.ad_photos
(
    ad_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    photo_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT ad_photos_pkey PRIMARY KEY (ad_uuid, photo_uuid)
);

CREATE TABLE IF NOT EXISTS public.ad_vehicles
(
    ad_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    vehicle_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT ad_vehicles_pkey PRIMARY KEY (ad_uuid, vehicle_uuid)
);

CREATE TABLE IF NOT EXISTS public.ads
(
    uuid character varying COLLATE pg_catalog."default" NOT NULL,
    title character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying COLLATE pg_catalog."default",
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT ads_pkey PRIMARY KEY (uuid)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    uuid character varying COLLATE pg_catalog."default" NOT NULL,
    ad_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    message character varying COLLATE pg_catalog."default" NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT notifications_pkey PRIMARY KEY (uuid),
    CONSTRAINT notifications_ad_uuid_key UNIQUE (ad_uuid)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    user_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    vehicle_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    total_price double precision NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT payments_pkey PRIMARY KEY (user_uuid, vehicle_uuid)
);

CREATE TABLE IF NOT EXISTS public.reservations
(
    user_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    vehicle_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    period_from timestamp without time zone NOT NULL,
    period_to timestamp without time zone NOT NULL,
    pph double precision NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT reservations_pkey PRIMARY KEY (user_uuid, vehicle_uuid)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    user_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    vehicle_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    rating double precision NOT NULL,
    comment text COLLATE pg_catalog."default",
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT reviews_pkey PRIMARY KEY (user_uuid, vehicle_uuid)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    uuid character varying COLLATE pg_catalog."default" NOT NULL,
    code character varying COLLATE pg_catalog."default",
    title_fr character varying(100) COLLATE pg_catalog."default",
    title_en character varying(100) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (uuid)
);

CREATE TABLE IF NOT EXISTS public.storages
(
    uuid character varying COLLATE pg_catalog."default" NOT NULL,
    file_name text COLLATE pg_catalog."default",
    url text COLLATE pg_catalog."default",
    mimetype text COLLATE pg_catalog."default",
    width integer,
    height integer,
    size integer,
    thumbnail jsonb,
    medium jsonb,
    date_added timestamp without time zone DEFAULT now(),
    date_modified timestamp without time zone DEFAULT now(),
    cloudinary_file_name text COLLATE pg_catalog."default",
    format text COLLATE pg_catalog."default",
    public_id text COLLATE pg_catalog."default",
    version integer,
    summary text COLLATE pg_catalog."default",
    CONSTRAINT storages_pkey PRIMARY KEY (uuid)
);

CREATE TABLE IF NOT EXISTS public.user_notifications
(
    user_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    notification_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_notifications_pkey PRIMARY KEY (user_uuid, notification_uuid)
);

CREATE TABLE IF NOT EXISTS public.users
(
    uuid character varying COLLATE pg_catalog."default" NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    firstname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    avatar_uuid character varying COLLATE pg_catalog."default",
    role_uuid character varying COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(100) COLLATE pg_catalog."default",
    status character varying COLLATE pg_catalog."default" NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (uuid)
);

CREATE TABLE IF NOT EXISTS public.vehicles
(
    uuid character varying COLLATE pg_catalog."default" NOT NULL,
    brand character varying COLLATE pg_catalog."default" NOT NULL,
    model character varying COLLATE pg_catalog."default" NOT NULL,
    year integer NOT NULL,
    color character varying COLLATE pg_catalog."default" NOT NULL,
    is_rentable boolean NOT NULL,
    is_purchasable boolean NOT NULL,
    date_added timestamp without time zone NOT NULL,
    date_modified timestamp without time zone NOT NULL,
    CONSTRAINT vehicles_pkey PRIMARY KEY (uuid)
);

ALTER TABLE IF EXISTS public.ad_photos
    ADD CONSTRAINT ad_photos_ad_uuid_fkey FOREIGN KEY (ad_uuid)
    REFERENCES public.ads (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ad_photos
    ADD CONSTRAINT ad_photos_photo_uuid_fkey FOREIGN KEY (photo_uuid)
    REFERENCES public.storages (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ad_vehicles
    ADD CONSTRAINT ad_vehicles_ad_uuid_fkey FOREIGN KEY (ad_uuid)
    REFERENCES public.ads (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ad_vehicles
    ADD CONSTRAINT ad_vehicles_vehicle_uuid_fkey FOREIGN KEY (vehicle_uuid)
    REFERENCES public.vehicles (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_ad_uuid_fkey FOREIGN KEY (ad_uuid)
    REFERENCES public.ads (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS notifications_ad_uuid_key
    ON public.notifications(ad_uuid);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_user_uuid_fkey FOREIGN KEY (user_uuid)
    REFERENCES public.users (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_vehicle_uuid_fkey FOREIGN KEY (vehicle_uuid)
    REFERENCES public.vehicles (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reservations
    ADD CONSTRAINT reservations_user_uuid_fkey FOREIGN KEY (user_uuid)
    REFERENCES public.users (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reservations
    ADD CONSTRAINT reservations_vehicle_uuid_fkey FOREIGN KEY (vehicle_uuid)
    REFERENCES public.vehicles (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_user_uuid_fkey FOREIGN KEY (user_uuid)
    REFERENCES public.users (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_vehicle_uuid_fkey FOREIGN KEY (vehicle_uuid)
    REFERENCES public.vehicles (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_notifications
    ADD CONSTRAINT user_notifications_notification_uuid_fkey FOREIGN KEY (notification_uuid)
    REFERENCES public.notifications (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_notifications
    ADD CONSTRAINT user_notifications_user_uuid_fkey FOREIGN KEY (user_uuid)
    REFERENCES public.users (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_avatar_uuid_fkey FOREIGN KEY (avatar_uuid)
    REFERENCES public.storages (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_role_uuid_fkey FOREIGN KEY (role_uuid)
    REFERENCES public.roles (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
END;

ALTER TABLE IF EXISTS public.brands
    ADD COLUMN status enumlist NOT NULL DEFAULT 'NONE';


-- requete pour migration

ALTER TYPE public.enumlist
    ADD VALUE 'ACTIVED' IF NOT EXISTS;
    ADD VALUE 'UNACTIVED' IF NOT EXISTS;
    ADD VALUE 'DELETED' IF NOT EXISTS;
    ADD VALUE 'BLOCKED' IF NOT EXISTS;
    ADD VALUE 'RENTAL' IF NOT EXISTS;
    ADD VALUE 'PURCHASE' IF NOT EXISTS;
    ADD VALUE 'SALE' IF NOT EXISTS;
    ADD VALUE 'BOOKING' IF NOT EXISTS;
    ADD VALUE 'NONE' IF NOT EXISTS;
    ADD VALUE 'AVAILABLE' IF NOT EXISTS;

DO $$

BEGIN

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'ACTIVED' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'ACTIVED';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'UNACTIVED' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'UNACTIVED';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'DELETED' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'DELETED';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'BLOCKED' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'BLOCKED';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'RENTAL' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'RENTAL';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'PURCHASE' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'PURCHASE';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'SALE' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'SALE';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'BOOKING' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'BOOKING';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'NONE' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'NONE';

    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'AVAILABLE' AND enumtypid = 'enumlist'::regtype) THEN

        ALTER TYPE public.enumlist ADD VALUE 'AVAILABLE';

    END IF;

END $$;